def homography(pts1, pts2):
    mean1, mean2 = np.mean(pts1, axis=0), np.mean(pts2, axis=0)
    s1, s2 = 4*np.sqrt(2)/np.sum(np.sqrt(np.sum((pts1-mean1)**2, axis=1))), 4*np.sqrt(2)/np.sum(np.sqrt(np.sum((pts2-mean2)**2, axis=1)))
    tx1, ty1, tx2, ty2 = -s1*mean1[0], -s1*mean1[1], -s2*mean2[0], -s2*mean2[1]
    T1, T2 = np.array(((s1, 0, tx1), (0, s1, ty1), (0, 0, 1))), np.array(((s2, 0, tx2), (0, s2, ty2), (0, 0, 1)))
    X11, X21 = T1 @ np.concatenate((pts1[0], [1])).reshape(3, 1), T2 @ np.concatenate((pts2[0], [1])).reshape(3, 1)
    X12, X22 = T1 @ np.concatenate((pts1[1], [1])).reshape(3, 1), T2 @ np.concatenate((pts2[1], [1])).reshape(3, 1)
    X13, X23 = T1 @ np.concatenate((pts1[2], [1])).reshape(3, 1), T2 @ np.concatenate((pts2[2], [1])).reshape(3, 1)
    X14, X24 = T1 @ np.concatenate((pts1[3], [1])).reshape(3, 1), T2 @ np.concatenate((pts2[3], [1])).reshape(3, 1)
    A1 = np.array(((-X11[0][0], -X11[1][0], -1, 0, 0, 0, X21[0][0]*X11[0][0], X21[0][0]*X11[1][0], X21[0][0]), (0, 0, 0, -X11[0][0], -X11[1][0], -1, X21[1][0]*X11[0][0], X21[1][0]*X11[1][0], X21[1][0])))
    A2 = np.array(((-X12[0][0], -X12[1][0], -1, 0, 0, 0, X22[0][0]*X12[0][0], X22[0][0]*X12[1][0], X22[0][0]), (0, 0, 0, -X12[0][0], -X12[1][0], -1, X22[1][0]*X12[0][0], X22[1][0]*X12[1][0], X22[1][0])))
    A3 = np.array(((-X13[0][0], -X13[1][0], -1, 0, 0, 0, X23[0][0]*X13[0][0], X23[0][0]*X13[1][0], X23[0][0]), (0, 0, 0, -X13[0][0], -X13[1][0], -1, X23[1][0]*X13[0][0], X23[1][0]*X13[1][0], X23[1][0])))
    A4 = np.array(((-X14[0][0], -X14[1][0], -1, 0, 0, 0, X24[0][0]*X14[0][0], X24[0][0]*X14[1][0], X24[0][0]), (0, 0, 0, -X14[0][0], -X14[1][0], -1, X24[1][0]*X14[0][0], X24[1][0]*X14[1][0], X24[1][0])))
    A = np.vstack((A1, A2, A3, A4))
    U, S, V = np.linalg.svd(A)
    h = np.reshape(V[-1], (3, 3))
    H = linalg.inv(T2) @ h @ T1
    H = (1 / H.item(8)) * H
    return H
        